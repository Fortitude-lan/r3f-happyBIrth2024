/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 .\public\models\forests.glb -k 
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations, Html } from "@react-three/drei";
import { useTexture } from "@react-three/drei";
import {
  BallCollider,
  CuboidCollider,
  CylinderCollider,
  RigidBody,
  InstancedRigidBodies,
} from "@react-three/rapier";
import { Button, Popover } from "antd";
import { useGame } from "ecctrl";
import { useControls } from "leva";

export function Forests(props) {
  const group = useRef();
  const bowlRef = useRef();
  const [isTouch, setisTouch] = useState(false);
  const { nodes, materials, animations } = useGLTF("/models/forests2.glb");
  const { actions } = useAnimations(animations, group);
  const texture = useTexture("/textures/forest_color_texture.png");

  const texture_house1 = useTexture("/textures/house_img1.png");
  const texture_house2 = useTexture("/textures/house_img2.png");
  const texture_house3 = useTexture("/textures/house_img3.png");

  const texture_ball = useTexture("/textures/pikaBall.png");
  const texture_bowl = useTexture("/textures/bowl.png");

  texture.flipY = false;
  texture_house1.flipY = false;
  texture_house2.flipY = false;
  texture_house3.flipY = false;
  texture_bowl.flipY = false;

  const circleRef = useRef();
  const date = useRef(0);
  const setMoveToPoint = useGame((state) => state.setMoveToPoint);
  // const getBalls = () => {
  //   const num = 10;
  //   let arr = [];
  //   for (let i = 0; i <= num; i++) {
  //     let name = i == 0 ? "球体" : i < 10 ? `球体00${i}` : `球体0${i}`;
  //     arr.push(
  //       <RigidBody colliders="ball" key={`ball${i}`} name={`ball${i}`}>
  //         <mesh
  //           // frustumCulled={false}
  //           name={name}
  //           geometry={nodes[name].geometry}
  //           material={nodes[name].material}
  //           scale={2}
  //           // rotation={[
  //           //   (Math.random() * Math.PI) / 2,
  //           //   (Math.random() * Math.PI) / 2,
  //           //   (Math.random() * Math.PI) / 2,
  //           // ]}
  //           // position={[
  //           //   Math.random() * (22 - 18) + 18,
  //           //   2,
  //           //   Math.random() * (22 - 18) + 18,
  //           // ]}
  //         >
  //           <primitive object={nodes[name].material} />
  //           <meshStandardMaterial map={texture_ball} />
  //         </mesh>
  //       </RigidBody>
  //     );
  //   }
  //   return arr;
  // };
  return (
    <>
      {props.mode && (
        <mesh ref={circleRef} rotation-x={-Math.PI / 2}>
          <ringGeometry args={[0.15, 0.2]} />
          <meshBasicMaterial color={"red"} transparent opacity={0.25} />
        </mesh>
      )}

      <group
        ref={group}
        {...props}
        dispose={null}
        scale={3}
        position={[0, 0, 0]}
      >
        <hemisphereLight skyColor="red" groundColor="#000" intensity={1} />

        <group name="Scene">
          <RigidBody
            type="fixed"
            colliders="trimesh"
            name="平面"
            onCollisionEnter={() => {
              console.log("平面 石头");
            }}
          >
            <mesh
              name="平面003"
              geometry={nodes.平面003.geometry}
              material={nodes.平面003.material}
              receiveShadow
              onPointerMove={({ point }) => {
                if (props.mode) {
                  circleRef.current.position.z = point.z;

                  circleRef.current.position.x = point.x;
                  circleRef.current.position.y = point.y + 0.01;
                }
              }}
              onPointerDown={() => {
                date.current = Date.now();
              }}
              onPointerUp={({ point }) => {
                if (Date.now() - date.current < 200) {
                  // a quick click
                  setMoveToPoint(point);
                }
              }}
            >
              <meshStandardMaterial map={texture} />
            </mesh>
            <mesh
              name="stones"
              geometry={nodes.stones.geometry}
              material={nodes.stones.material}
            >
              <meshStandardMaterial map={texture} />
            </mesh>
          </RigidBody>
          <RigidBody
            type="fixed"
            colliders="trimesh"
            name="house1"
            onCollisionEnter={({ manifold, target, other }) => {
              // console.log("撞到的位置: ", manifold.solverContactPoint(0));
              console.log("撞到", target.rigidBodyObject.name);
              // if (other.rigidBodyObject) {
              //   console.log("其他", other.rigidBodyObject.name);
              // }
            }}
          >
            <mesh name="house1" geometry={nodes.house1.geometry}>
              <meshStandardMaterial map={texture_house1} />
            </mesh>
          </RigidBody>
          <RigidBody
            type="fixed"
            colliders="trimesh"
            name="house2"
            onCollisionEnter={() => {
              console.log("house2");
            }}
          >
            <mesh name="house2" geometry={nodes.house2.geometry}>
              <meshStandardMaterial map={texture_house2} />
            </mesh>
          </RigidBody>
          <RigidBody
            type="fixed"
            colliders="trimesh"
            name="house3"
            onCollisionEnter={() => {
              console.log("house3");
            }}
          >
            <mesh name="house3" geometry={nodes.house3.geometry}>
              <meshStandardMaterial map={texture_house3} />
            </mesh>
          </RigidBody>

          <RigidBody
            type="fixed"
            colliders="trimesh"
            name="house4"
            onCollisionEnter={() => {
              console.log("stone");
            }}
          >
            <mesh
              name="house4"
              geometry={nodes.house4.geometry}
              material={nodes.house4.material}
            >
              <meshStandardMaterial map={texture} />
            </mesh>
          </RigidBody>

          <RigidBody
            type="fixed"
            colliders="trimesh"
            name="bowl"
            onCollisionEnter={({ manifold, target, other }) => {
              if (
                other.rigidBodyObject &&
                other.rigidBodyObject.name === "character"
              ) {
                console.log(
                  "Collision at world position ",
                  manifold.solverContactPoint(0)
                );

                console.log(
                  // this rigid body's Object3D
                  target.rigidBodyObject.name,
                  " collided with ",
                  // the other rigid body's Object3D
                  other.rigidBodyObject.name
                );
                setisTouch(true);
              }
            }}
            onCollisionExit={() => {
              console.log("leave bowl");
              setisTouch(false);
            }}
          >
            <mesh
              ref={bowlRef}
              name="bowl"
              geometry={nodes.bowl.geometry}
              material={nodes.bowl.material}
            >
              <meshStandardMaterial map={texture_bowl} />
            </mesh>
            <Html
              position={[-16.5, 0.5, 20]}
              wrapperClass="label"
              center
              distanceFactor={6}
              occlude={[bowlRef]}
            >
              <Popover
                trigger="hover"
                open={isTouch}
                content={
                  <div>
                    <p>一大碗的巧克力豆哦！</p>
                    <p>快去找到那个充满惊喜的地方吧！</p>
                  </div>
                }
                title="大碗巧克力豆 :"
              >
                <Button type={`primary ${isTouch && "touch"}`}>
                  被发现啦！
                </Button>
              </Popover>
            </Html>
          </RigidBody>
          {/* <group position={[-5, 0, -5]}>{getBalls()}</group> */}

          <mesh
            name="plants"
            geometry={nodes.plants.geometry}
            material={nodes.plants.material}
          >
            <meshStandardMaterial map={texture} />
          </mesh>
          <mesh
            name="river"
            geometry={nodes.river.geometry}
            material={nodes.river.material}
          >
            <meshStandardMaterial color="#A3E6EA" />
          </mesh>
        </group>
      </group>
    </>
  );
}

export const RigidMesh = ({ children, ...rest }) => {
  console.log(rest);
  return <RigidBody {...rest}>{children}</RigidBody>;
};
useGLTF.preload("/models/forests1.glb");
